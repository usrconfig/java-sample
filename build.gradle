import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
        classpath 'net.sf.proguard:proguard-base:6.2.2'
    }
}

plugins {
    id 'java'
    id 'application'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile 'commons-lang:commons-lang:2.6'
    compile("org.springframework.boot:spring-boot-starter-web:2.5.6")
    compile("org.springframework.boot:spring-boot-starter-mail:2.5.6")
    compile 'org.springframework.data:spring-data-mongodb:3.2.6'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.0'
    compile 'com.auth0:java-jwt:3.18.2'
    compile 'de.jkeylockmanager:jkeylockmanager:2.1.0'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.13'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: '2.5.6'
    
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.10'
    
    compileOnly("org.projectlombok:lombok:1.18.22")
    testCompileOnly("org.projectlombok:lombok:1.18.22")
    annotationProcessor("org.projectlombok:lombok:1.18.22")

    compile 'junit:junit:4.12'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task copySrc(type: Copy) {
    from "src"
    exclude "main/java"
    exclude "test"
    into "$buildDir/libs/src"
}

task copyCmd(type: Copy) {
    from "run.bat"
    into "$buildDir/libs"
}

task copyConfig(type: Copy) {
    from "config"
    into "$buildDir/libs/config"
}

task copyResource(type: Copy) {
    from "resources"
    into "$buildDir/libs/resources"
}

task copyZones(type: Copy) {
    from "zones"
    into "$buildDir/libs/zones"
}

task copyRuntimeLibs(type: Copy) {
    from configurations.runtime
    into "runtime-lib"
}

task copyLibs(type: Copy) {
    from "runtime-lib"
    into "$buildDir/libs/lib"
}

//build đầy đủ
task fatBuild(type: Copy, dependsOn: ["jar", "copySrc", "copyResource", "copyZones", "copyConfig", "copyCmd", "copyLibs"]) {
    description 'Build jar, copy web source, config and run bath file'
}

task fatBuildUpdateLib(type: Copy, dependsOn: ["jar", "copySrc", "copyResource", "copyZones", "copyConfig", "copyCmd", "copyRuntimeLibs", "copyLibs"]) {
    description 'Build jar, copy web source, config and run bath file'
}

//build bản nhẹ chỉ có src
task("litBuild", type: Copy, dependsOn: "copySrc") {
    description 'Copy web source'
    from configurations.runtime
    into "$buildDir/libs/lib"
}

task fatBuildProguard(dependsOn: ["proguard"]) {
    description 'Build proguard'
}

def dependsDir = "runtime-lib/"

task proguard(type: ProGuardTask) {
    println("Performing obfuscation..")
    configuration 'proguard.conf'
    injars "$buildDir/libs/${rootProject.name}.jar"
    outjars "$buildDir/libs/proguard/${rootProject.name}.jar"

    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars "${dependsDir}"

}

